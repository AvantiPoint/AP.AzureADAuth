trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - README.md
    - LICENSE
    - Clean-Outputs.ps1
    - .gitignore
    - .gitattributes
    - .editorconfig

name: $(Build.BuildId)

variables:
- name: BuildConfiguration
  value: Release
- name: TargetSolution
  value: '**/*.sln'

stages:
- template: jobs/build-module.yml

# - template: jobs/android.yml
#   parameters:
#     dependsOn: 'BuildModule'
#     displayName: 'Build Android App for UI Tests'
#     phaseName: 'Android-UITests'
#     artifactName: 'AndroidUITest'
#     solution: '**/*.sln'
#     keystoreFileName: '$(KeystoreFileName)'
#     keystoreAlias: '$(KeystoreAlias)'
#     keystorePassword: '$(KeystorePassword)'
#     appcenterSecret: ''
#     backendUri: '$(MockBackend)'

# - template: jobs/ios.yml
#   parameters:
#     dependsOn: 'BuildModule'
#     displayName: 'Build iOS App for UI Tests'
#     phaseName: 'iOS-UITests'
#     artifactName: 'iOSUITest'
#     solution: $(TargetSolution)
#     buildConfiguration: 'UITest'
#     certificateFile: '$(iOSCertificateFile)'
#     certificatePassword: '$(iOSCertificatePassword)'
#     provisioningProfile: '$(iOSProvisioningProfile)'
#     appcenterSecret: ''
#     backendUri: '$(MockBackend)'

# - template: jobs/run-uitests.yml
#   parameters:
#     phase: 'RunAndroidUITest'
#     displayName: 'Android UI Tests'
#     dependsOn: 'Android-UITests'
#     artifactName: 'AndroidUITest'
#     appFile: '$(System.ArtifactsDirectory)/*.apk'
#     appSlug: '$AndroidAppCenterSlug)'
#     devices: '$(AndroidAppCenterDevices)'
#     series: 'beta'

# - template: jobs/run-uitests.yml
#   parameters:
#     phase: 'RuniOSUITest'
#     displayName: 'iOS UI Tests'
#     dependsOn: 'iOS-UITests'
#     artifactName: 'iOSUITest'
#     appFile: '$(System.ArtifactsDirectory)/*.ipa'
#     dsymDirectory: '$(System.ArtifactsDirectory)'
#     appSlug: '$(iOSAppCenterSlug)'
#     devices: '$(iOSAppCenterDevices)'
#     series: 'beta'

# - template: jobs/android.yml
#   parameters:
#     dependsOn: 'RunAndroidUITest'
#     displayName: 'Build Android App for Distribution'
#     phaseName: 'AndroidDistribution'
#     artifactName: 'Android-Distribution'
#     solution: '**/*.sln'
#     keystoreFileName: '$(KeystoreFileName)'
#     keystoreAlias: '$(KeystoreAlias)'
#     keystorePassword: '$(KeystorePassword)'
#     appcenterSecret: '$(AndroidAppCenterSecret)'
#     backendUri: '$(BackendUri)'

# - template: jobs/ios.yml
#   parameters:
#     dependsOn: 'RuniOSUITest'
#     displayName: 'Build iOS App for Distribution'
#     phaseName: 'iOSDistribution'
#     artifactName: 'iOS'
#     solution: $(TargetSolution)
#     buildConfiguration: 'AppStore'
#     certificateFile: '$(iOSCertificateFile)'
#     certificatePassword: '$(iOSCertificatePassword)'
#     provisioningProfile: '$(iOSProvisioningProfile)'
#     appcenterSecret: '$(iOSAppCenterSecret)'
#     backendUri: '$(BackendUri)'

- stage: Deploy
  displayName: Deploy Artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: myget
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: 'AvaintPoint-MyGet'
  - deployment: nuget
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(),or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              try {
                $artifactDirectory = $env:searchDirectory
                Write-Host "Currect working directory - $artifactDirectory"
                $nupkg = Get-ChildItem -Path $artifactDirectory -Filter *.nupkg -Recurse | Select-Object -First 1

                if($null -eq $nupkg)
                {
                  Throw "No NuGet Package could be found in the current directory"
                }

                Write-Host "Package Name $($nupkg.Name)"
                $nupkg.Name -match '^(.*?)\.((?:\.?[0-9]+){3,}(?:[-a-z]+)?)\.nupkg$'
                $VersionName = $Matches[2]
                $IsPreview = $VersionName -match '-pre$'
                $ReleaseDisplayName = $VersionName

                if($null -eq $env:IS_PREVIEW)
                {
                  Write-Output ("##vso[task.setvariable variable=IS_PREVIEW;]$IsPreview")
                }

                if($true -eq $IsPreview)
                {
                  $baseVersion = $VersionName.Split('-')[0]
                  $ReleaseDisplayName = "$baseVersion - Preview"
                }

                Write-Host "Version Name - $VersionName"
                Write-Host "Release Display Name - $ReleaseDisplayName"

                Write-Output ("##vso[task.setvariable variable=VersionName;]$VersionName")
                Write-Output ("##vso[task.setvariable variable=ReleaseDisplayName;]$ReleaseDisplayName")
              }
              catch {
                Write-Error  $_
                exit 1
              }
            displayName: Process Artifacts for Release
            env:
              searchDirectory: $(Pipeline.Workspace)

          - task: GithubRelease@0 
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: dansiegel
              title: '$(ReleaseDisplayName)'
              tagSource: manual
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: $(Pipeline.Workspace)/**/*.nupkg
              isDraft: true
              addChangeLog: true

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg;!$(Pipeline.Workspace)/**/*-ci*'
                nuGetFeedType: external
                publishFeedCredentials: 'NuGet'